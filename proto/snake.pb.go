// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.2
// source: snake.proto

package snake

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type State int32

const (
	State_BEGIN    State = 0
	State_FINISHED State = 1
	State_PLAYING  State = 2
	State_RESET    State = 3
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "BEGIN",
		1: "FINISHED",
		2: "PLAYING",
		3: "RESET",
	}
	State_value = map[string]int32{
		"BEGIN":    0,
		"FINISHED": 1,
		"PLAYING":  2,
		"RESET":    3,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_snake_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_snake_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{0}
}

type Difficulty int32

const (
	Difficulty_EASY   Difficulty = 0
	Difficulty_NORMAL Difficulty = 1
	Difficulty_HARD   Difficulty = 2
)

// Enum value maps for Difficulty.
var (
	Difficulty_name = map[int32]string{
		0: "EASY",
		1: "NORMAL",
		2: "HARD",
	}
	Difficulty_value = map[string]int32{
		"EASY":   0,
		"NORMAL": 1,
		"HARD":   2,
	}
)

func (x Difficulty) Enum() *Difficulty {
	p := new(Difficulty)
	*p = x
	return p
}

func (x Difficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Difficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_snake_proto_enumTypes[1].Descriptor()
}

func (Difficulty) Type() protoreflect.EnumType {
	return &file_snake_proto_enumTypes[1]
}

func (x Difficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Difficulty.Descriptor instead.
func (Difficulty) EnumDescriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{1}
}

type Direction int32

const (
	Direction_UP    Direction = 0
	Direction_DOWN  Direction = 1
	Direction_LEFT  Direction = 2
	Direction_RIGHT Direction = 3
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "UP",
		1: "DOWN",
		2: "LEFT",
		3: "RIGHT",
	}
	Direction_value = map[string]int32{
		"UP":    0,
		"DOWN":  1,
		"LEFT":  2,
		"RIGHT": 3,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_snake_proto_enumTypes[2].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_snake_proto_enumTypes[2]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{2}
}

type NewGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player *Player    `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Dif    Difficulty `protobuf:"varint,2,opt,name=dif,proto3,enum=Difficulty" json:"dif,omitempty"`
}

func (x *NewGameRequest) Reset() {
	*x = NewGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewGameRequest) ProtoMessage() {}

func (x *NewGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewGameRequest.ProtoReflect.Descriptor instead.
func (*NewGameRequest) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{0}
}

func (x *NewGameRequest) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *NewGameRequest) GetDif() Difficulty {
	if x != nil {
		return x.Dif
	}
	return Difficulty_EASY
}

type NewGameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Game *GameRoom `protobuf:"bytes,1,opt,name=game,proto3" json:"game,omitempty"`
}

func (x *NewGameResponse) Reset() {
	*x = NewGameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewGameResponse) ProtoMessage() {}

func (x *NewGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewGameResponse.ProtoReflect.Descriptor instead.
func (*NewGameResponse) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{1}
}

func (x *NewGameResponse) GetGame() *GameRoom {
	if x != nil {
		return x.Game
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{2}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GameRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId  string       `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Players []*Player    `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	Board   *BoardConfig `protobuf:"bytes,3,opt,name=board,proto3" json:"board,omitempty"`
	Snakes  []*Snake     `protobuf:"bytes,4,rep,name=snakes,proto3" json:"snakes,omitempty"`
	Speed   int32        `protobuf:"varint,5,opt,name=speed,proto3" json:"speed,omitempty"`
	Dif     Difficulty   `protobuf:"varint,6,opt,name=dif,proto3,enum=Difficulty" json:"dif,omitempty"`
	State   State        `protobuf:"varint,7,opt,name=state,proto3,enum=State" json:"state,omitempty"`
}

func (x *GameRoom) Reset() {
	*x = GameRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRoom) ProtoMessage() {}

func (x *GameRoom) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRoom.ProtoReflect.Descriptor instead.
func (*GameRoom) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{3}
}

func (x *GameRoom) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GameRoom) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameRoom) GetBoard() *BoardConfig {
	if x != nil {
		return x.Board
	}
	return nil
}

func (x *GameRoom) GetSnakes() []*Snake {
	if x != nil {
		return x.Snakes
	}
	return nil
}

func (x *GameRoom) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *GameRoom) GetDif() Difficulty {
	if x != nil {
		return x.Dif
	}
	return Difficulty_EASY
}

func (x *GameRoom) GetState() State {
	if x != nil {
		return x.State
	}
	return State_BEGIN
}

type BoardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32         `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int32         `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Food   []*Coordinate `protobuf:"bytes,3,rep,name=food,proto3" json:"food,omitempty"`
}

func (x *BoardConfig) Reset() {
	*x = BoardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardConfig) ProtoMessage() {}

func (x *BoardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardConfig.ProtoReflect.Descriptor instead.
func (*BoardConfig) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{4}
}

func (x *BoardConfig) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *BoardConfig) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BoardConfig) GetFood() []*Coordinate {
	if x != nil {
		return x.Food
	}
	return nil
}

type Snake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dir   Direction     `protobuf:"varint,1,opt,name=dir,proto3,enum=Direction" json:"dir,omitempty"`
	Cells []*Coordinate `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (x *Snake) Reset() {
	*x = Snake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snake) ProtoMessage() {}

func (x *Snake) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snake.ProtoReflect.Descriptor instead.
func (*Snake) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{5}
}

func (x *Snake) GetDir() Direction {
	if x != nil {
		return x.Dir
	}
	return Direction_UP
}

func (x *Snake) GetCells() []*Coordinate {
	if x != nil {
		return x.Cells
	}
	return nil
}

type Coordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{6}
}

func (x *Coordinate) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Coordinate) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type MoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId string  `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Player *Player `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
	Snake  *Snake  `protobuf:"bytes,3,opt,name=snake,proto3" json:"snake,omitempty"`
}

func (x *MoveRequest) Reset() {
	*x = MoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRequest) ProtoMessage() {}

func (x *MoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRequest.ProtoReflect.Descriptor instead.
func (*MoveRequest) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{7}
}

func (x *MoveRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MoveRequest) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *MoveRequest) GetSnake() *Snake {
	if x != nil {
		return x.Snake
	}
	return nil
}

type MoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
}

func (x *MoveResponse) Reset() {
	*x = MoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveResponse) ProtoMessage() {}

func (x *MoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveResponse.ProtoReflect.Descriptor instead.
func (*MoveResponse) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{8}
}

func (x *MoveResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type GameUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId string  `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Player *Player `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *GameUpdateRequest) Reset() {
	*x = GameUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUpdateRequest) ProtoMessage() {}

func (x *GameUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUpdateRequest.ProtoReflect.Descriptor instead.
func (*GameUpdateRequest) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{9}
}

func (x *GameUpdateRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GameUpdateRequest) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

type GameUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State  State       `protobuf:"varint,1,opt,name=state,proto3,enum=State" json:"state,omitempty"`
	Fruit  *Coordinate `protobuf:"bytes,2,opt,name=fruit,proto3" json:"fruit,omitempty"`
	Scores []int32     `protobuf:"varint,3,rep,packed,name=scores,proto3" json:"scores,omitempty"`
	Snakes []*Snake    `protobuf:"bytes,4,rep,name=snakes,proto3" json:"snakes,omitempty"`
}

func (x *GameUpdateResponse) Reset() {
	*x = GameUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUpdateResponse) ProtoMessage() {}

func (x *GameUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUpdateResponse.ProtoReflect.Descriptor instead.
func (*GameUpdateResponse) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{10}
}

func (x *GameUpdateResponse) GetState() State {
	if x != nil {
		return x.State
	}
	return State_BEGIN
}

func (x *GameUpdateResponse) GetFruit() *Coordinate {
	if x != nil {
		return x.Fruit
	}
	return nil
}

func (x *GameUpdateResponse) GetScores() []int32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *GameUpdateResponse) GetSnakes() []*Snake {
	if x != nil {
		return x.Snakes
	}
	return nil
}

type FinishGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId string  `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Player *Player `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *FinishGameRequest) Reset() {
	*x = FinishGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishGameRequest) ProtoMessage() {}

func (x *FinishGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishGameRequest.ProtoReflect.Descriptor instead.
func (*FinishGameRequest) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{11}
}

func (x *FinishGameRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *FinishGameRequest) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

type TestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TestRequest) Reset() {
	*x = TestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequest) ProtoMessage() {}

func (x *TestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequest.ProtoReflect.Descriptor instead.
func (*TestRequest) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{12}
}

func (x *TestRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TestResponse) Reset() {
	*x = TestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResponse) ProtoMessage() {}

func (x *TestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResponse.ProtoReflect.Descriptor instead.
func (*TestResponse) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{13}
}

func (x *TestResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_snake_proto protoreflect.FileDescriptor

var file_snake_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a,
	0x0e, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x03, 0x64, 0x69, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x03, 0x64, 0x69, 0x66, 0x22,
	0x30, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x67, 0x61, 0x6d,
	0x65, 0x22, 0x2c, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xdc, 0x01, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x52, 0x06, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x03, 0x64, 0x69, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x03, 0x64, 0x69, 0x66,
	0x12, 0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x06, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5c,
	0x0a, 0x0b, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x66,
	0x6f, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x04, 0x66, 0x6f, 0x6f, 0x64, 0x22, 0x48, 0x0a, 0x05,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x64, 0x69, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x28, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79,
	0x22, 0x64, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x05, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52,
	0x05, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x22, 0x4c, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x8d,
	0x01, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x66, 0x72, 0x75, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x66, 0x72, 0x75, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x06, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x06, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x73, 0x22, 0x4c,
	0x0a, 0x11, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x27, 0x0a, 0x0b,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x38, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x03, 0x2a, 0x2c, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x41, 0x53, 0x59, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x41, 0x52, 0x44, 0x10, 0x02, 0x2a, 0x32, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x32, 0x98, 0x02, 0x0a, 0x0c, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x0f, 0x2e, 0x4e, 0x65, 0x77,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x4e, 0x65,
	0x77, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x2a, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x12, 0x0c, 0x2e, 0x4d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x4d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x34, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x65, 0x6c, 0x73, 0x74, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x42, 0x0a, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x07, 0x2e, 0x3b, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_snake_proto_rawDescOnce sync.Once
	file_snake_proto_rawDescData = file_snake_proto_rawDesc
)

func file_snake_proto_rawDescGZIP() []byte {
	file_snake_proto_rawDescOnce.Do(func() {
		file_snake_proto_rawDescData = protoimpl.X.CompressGZIP(file_snake_proto_rawDescData)
	})
	return file_snake_proto_rawDescData
}

var file_snake_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_snake_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_snake_proto_goTypes = []interface{}{
	(State)(0),                 // 0: State
	(Difficulty)(0),            // 1: Difficulty
	(Direction)(0),             // 2: Direction
	(*NewGameRequest)(nil),     // 3: NewGameRequest
	(*NewGameResponse)(nil),    // 4: NewGameResponse
	(*Player)(nil),             // 5: Player
	(*GameRoom)(nil),           // 6: GameRoom
	(*BoardConfig)(nil),        // 7: BoardConfig
	(*Snake)(nil),              // 8: Snake
	(*Coordinate)(nil),         // 9: Coordinate
	(*MoveRequest)(nil),        // 10: MoveRequest
	(*MoveResponse)(nil),       // 11: MoveResponse
	(*GameUpdateRequest)(nil),  // 12: GameUpdateRequest
	(*GameUpdateResponse)(nil), // 13: GameUpdateResponse
	(*FinishGameRequest)(nil),  // 14: FinishGameRequest
	(*TestRequest)(nil),        // 15: TestRequest
	(*TestResponse)(nil),       // 16: TestResponse
}
var file_snake_proto_depIdxs = []int32{
	5,  // 0: NewGameRequest.player:type_name -> Player
	1,  // 1: NewGameRequest.dif:type_name -> Difficulty
	6,  // 2: NewGameResponse.game:type_name -> GameRoom
	5,  // 3: GameRoom.players:type_name -> Player
	7,  // 4: GameRoom.board:type_name -> BoardConfig
	8,  // 5: GameRoom.snakes:type_name -> Snake
	1,  // 6: GameRoom.dif:type_name -> Difficulty
	0,  // 7: GameRoom.state:type_name -> State
	9,  // 8: BoardConfig.food:type_name -> Coordinate
	2,  // 9: Snake.dir:type_name -> Direction
	9,  // 10: Snake.cells:type_name -> Coordinate
	5,  // 11: MoveRequest.player:type_name -> Player
	8,  // 12: MoveRequest.snake:type_name -> Snake
	5,  // 13: GameUpdateRequest.player:type_name -> Player
	0,  // 14: GameUpdateResponse.state:type_name -> State
	9,  // 15: GameUpdateResponse.fruit:type_name -> Coordinate
	8,  // 16: GameUpdateResponse.snakes:type_name -> Snake
	5,  // 17: FinishGameRequest.player:type_name -> Player
	3,  // 18: SnakeService.StartNewGame:input_type -> NewGameRequest
	10, // 19: SnakeService.MoveSnake:input_type -> MoveRequest
	12, // 20: SnakeService.GetGameUpdates:input_type -> GameUpdateRequest
	14, // 21: SnakeService.FinishGame:input_type -> FinishGameRequest
	15, // 22: SnakeService.TestConnection:input_type -> TestRequest
	4,  // 23: SnakeService.StartNewGame:output_type -> NewGameResponse
	11, // 24: SnakeService.MoveSnake:output_type -> MoveResponse
	13, // 25: SnakeService.GetGameUpdates:output_type -> GameUpdateResponse
	13, // 26: SnakeService.FinishGame:output_type -> GameUpdateResponse
	16, // 27: SnakeService.TestConnection:output_type -> TestResponse
	23, // [23:28] is the sub-list for method output_type
	18, // [18:23] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_snake_proto_init() }
func file_snake_proto_init() {
	if File_snake_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewGameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snake_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_snake_proto_goTypes,
		DependencyIndexes: file_snake_proto_depIdxs,
		EnumInfos:         file_snake_proto_enumTypes,
		MessageInfos:      file_snake_proto_msgTypes,
	}.Build()
	File_snake_proto = out.File
	file_snake_proto_rawDesc = nil
	file_snake_proto_goTypes = nil
	file_snake_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SnakeServiceClient is the client API for SnakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnakeServiceClient interface {
	StartNewGame(ctx context.Context, in *NewGameRequest, opts ...grpc.CallOption) (*NewGameResponse, error)
	MoveSnake(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	GetGameUpdates(ctx context.Context, in *GameUpdateRequest, opts ...grpc.CallOption) (SnakeService_GetGameUpdatesClient, error)
	FinishGame(ctx context.Context, in *FinishGameRequest, opts ...grpc.CallOption) (*GameUpdateResponse, error)
	TestConnection(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type snakeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnakeServiceClient(cc grpc.ClientConnInterface) SnakeServiceClient {
	return &snakeServiceClient{cc}
}

func (c *snakeServiceClient) StartNewGame(ctx context.Context, in *NewGameRequest, opts ...grpc.CallOption) (*NewGameResponse, error) {
	out := new(NewGameResponse)
	err := c.cc.Invoke(ctx, "/SnakeService/StartNewGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snakeServiceClient) MoveSnake(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/SnakeService/MoveSnake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snakeServiceClient) GetGameUpdates(ctx context.Context, in *GameUpdateRequest, opts ...grpc.CallOption) (SnakeService_GetGameUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SnakeService_serviceDesc.Streams[0], "/SnakeService/GetGameUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &snakeServiceGetGameUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnakeService_GetGameUpdatesClient interface {
	Recv() (*GameUpdateResponse, error)
	grpc.ClientStream
}

type snakeServiceGetGameUpdatesClient struct {
	grpc.ClientStream
}

func (x *snakeServiceGetGameUpdatesClient) Recv() (*GameUpdateResponse, error) {
	m := new(GameUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snakeServiceClient) FinishGame(ctx context.Context, in *FinishGameRequest, opts ...grpc.CallOption) (*GameUpdateResponse, error) {
	out := new(GameUpdateResponse)
	err := c.cc.Invoke(ctx, "/SnakeService/FinishGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snakeServiceClient) TestConnection(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/SnakeService/TestConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnakeServiceServer is the server API for SnakeService service.
type SnakeServiceServer interface {
	StartNewGame(context.Context, *NewGameRequest) (*NewGameResponse, error)
	MoveSnake(context.Context, *MoveRequest) (*MoveResponse, error)
	GetGameUpdates(*GameUpdateRequest, SnakeService_GetGameUpdatesServer) error
	FinishGame(context.Context, *FinishGameRequest) (*GameUpdateResponse, error)
	TestConnection(context.Context, *TestRequest) (*TestResponse, error)
}

// UnimplementedSnakeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSnakeServiceServer struct {
}

func (*UnimplementedSnakeServiceServer) StartNewGame(context.Context, *NewGameRequest) (*NewGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNewGame not implemented")
}
func (*UnimplementedSnakeServiceServer) MoveSnake(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveSnake not implemented")
}
func (*UnimplementedSnakeServiceServer) GetGameUpdates(*GameUpdateRequest, SnakeService_GetGameUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGameUpdates not implemented")
}
func (*UnimplementedSnakeServiceServer) FinishGame(context.Context, *FinishGameRequest) (*GameUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishGame not implemented")
}
func (*UnimplementedSnakeServiceServer) TestConnection(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}

func RegisterSnakeServiceServer(s *grpc.Server, srv SnakeServiceServer) {
	s.RegisterService(&_SnakeService_serviceDesc, srv)
}

func _SnakeService_StartNewGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnakeServiceServer).StartNewGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SnakeService/StartNewGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnakeServiceServer).StartNewGame(ctx, req.(*NewGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnakeService_MoveSnake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnakeServiceServer).MoveSnake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SnakeService/MoveSnake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnakeServiceServer).MoveSnake(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnakeService_GetGameUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GameUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnakeServiceServer).GetGameUpdates(m, &snakeServiceGetGameUpdatesServer{stream})
}

type SnakeService_GetGameUpdatesServer interface {
	Send(*GameUpdateResponse) error
	grpc.ServerStream
}

type snakeServiceGetGameUpdatesServer struct {
	grpc.ServerStream
}

func (x *snakeServiceGetGameUpdatesServer) Send(m *GameUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SnakeService_FinishGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnakeServiceServer).FinishGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SnakeService/FinishGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnakeServiceServer).FinishGame(ctx, req.(*FinishGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnakeService_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnakeServiceServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SnakeService/TestConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnakeServiceServer).TestConnection(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnakeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SnakeService",
	HandlerType: (*SnakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartNewGame",
			Handler:    _SnakeService_StartNewGame_Handler,
		},
		{
			MethodName: "MoveSnake",
			Handler:    _SnakeService_MoveSnake_Handler,
		},
		{
			MethodName: "FinishGame",
			Handler:    _SnakeService_FinishGame_Handler,
		},
		{
			MethodName: "TestConnection",
			Handler:    _SnakeService_TestConnection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetGameUpdates",
			Handler:       _SnakeService_GetGameUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "snake.proto",
}
