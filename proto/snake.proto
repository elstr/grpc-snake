// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.github.elstr.grpc-snake";
option java_outer_classname = "SnakeProto";
option go_package = ".;snake";

message NewGameRequest {
    Player player = 1;
    Difficulty dif = 2;
}
message NewGameResponse {
    GameRoom game = 1;
}

message Player {
    string id = 1;
    string name = 2;
}
message GameRoom {
    string roomId = 1;
    repeated Player players= 2;
    BoardConfig board = 3;
    repeated Snake snakes = 4;
    int32 speed = 5;
    Difficulty dif = 6;
    State state = 7;
}

message BoardConfig {
    int32 width = 1;
    int32 height = 2;
    repeated Coordinate food = 3;
}
message Snake {
    Direction dir = 1;
    repeated Coordinate cells = 2;
}
message Coordinate {
    int32 x = 1;
    int32 y = 2;
}

message MoveRequest {
    string roomId = 1;
    Player player = 2;
    Snake snake = 3;
}
message MoveResponse {
    bool isValid = 1;
}

message GameUpdateRequest {
    string roomId = 1;
    Player player = 2;
}
message GameUpdateResponse {
    State state = 1;
    Coordinate fruit = 2;
    repeated int32 scores = 3;
    repeated Snake snakes = 4;
}

message FinishGameRequest {
    string roomId = 1;
    Player player = 2;
}

enum State {
    BEGIN = 0;
    FINISHED = 1;
    PLAYING = 2;
    RESET = 3;
}
enum Difficulty {
    EASY = 0;
    NORMAL = 1;
    HARD = 2;
}
enum Direction {
    UP = 0;
    DOWN = 1;
    LEFT = 2;
    RIGHT = 3;
}


message TestRequest {
    string message = 1;
  }
  
message TestResponse {
   string result = 1;
}


service SnakeService {
  rpc StartNewGame(NewGameRequest) returns (NewGameResponse) {}
  rpc MoveSnake(MoveRequest) returns (MoveResponse){}
  rpc GetGameUpdates(GameUpdateRequest) returns (stream GameUpdateResponse) {}
  rpc FinishGame(FinishGameRequest) returns (GameUpdateResponse) {}
  rpc TestConnection(TestRequest) returns (TestResponse) {};
}

